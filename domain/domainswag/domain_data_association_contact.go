// Code generated by go-swagger; DO NOT EDIT.

package domainswag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainDataAssociationContact Representation of a Association additional information
// swagger:model domain.Data.AssociationContact
type DomainDataAssociationContact struct {

	// Contact ID related to the association contact information
	ContactID int64 `json:"contactId,omitempty"`

	// Date of the declaration of the association
	DeclarationDate strfmt.Date `json:"declarationDate,omitempty"`

	// Association additional information ID
	ID int64 `json:"id,omitempty"`

	// Date of the publication of the declaration of the association
	PublicationDate strfmt.Date `json:"publicationDate,omitempty"`

	// Number of the publication of the declaration of the association
	PublicationNumber string `json:"publicationNumber,omitempty"`

	// Page number of the publication of the declaration of the association
	PublicationPageNumber string `json:"publicationPageNumber,omitempty"`
}

// Validate validates this domain data association contact
func (m *DomainDataAssociationContact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeclarationDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublicationDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainDataAssociationContact) validateDeclarationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.DeclarationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("declarationDate", "body", "date", m.DeclarationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DomainDataAssociationContact) validatePublicationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("publicationDate", "body", "date", m.PublicationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainDataAssociationContact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainDataAssociationContact) UnmarshalBinary(b []byte) error {
	var res DomainDataAssociationContact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
