// Code generated by go-swagger; DO NOT EDIT.

package domainswag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainOwo Obfuscate whois
// swagger:model domain.Owo
type DomainOwo struct {

	// Obfuscated field
	// Required: true
	// Read Only: true
	Field string `json:"field"`
}

// Validate validates this domain owo
func (m *DomainOwo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateField(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var domainOwoTypeFieldPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["address","email","phone"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainOwoTypeFieldPropEnum = append(domainOwoTypeFieldPropEnum, v)
	}
}

const (

	// DomainOwoFieldAddress captures enum value "address"
	DomainOwoFieldAddress string = "address"

	// DomainOwoFieldEmail captures enum value "email"
	DomainOwoFieldEmail string = "email"

	// DomainOwoFieldPhone captures enum value "phone"
	DomainOwoFieldPhone string = "phone"
)

// prop value enum
func (m *DomainOwo) validateFieldEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, domainOwoTypeFieldPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DomainOwo) validateField(formats strfmt.Registry) error {

	if err := validate.RequiredString("field", "body", string(m.Field)); err != nil {
		return err
	}

	// value enum
	if err := m.validateFieldEnum("field", "body", m.Field); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainOwo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainOwo) UnmarshalBinary(b []byte) error {
	var res DomainOwo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
