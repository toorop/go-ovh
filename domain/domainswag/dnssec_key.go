// Code generated by go-swagger; DO NOT EDIT.

package domainswag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DnssecKey Key type
// swagger:model dnssec.Key
type DnssecKey struct {

	// Algorithm
	Algorithm int64 `json:"algorithm,omitempty"`

	// Flag of the dnssec key
	Flags int64 `json:"flags,omitempty"`

	// Public key
	PublicKey string `json:"publicKey,omitempty"`

	// Key tag
	Tag int64 `json:"tag,omitempty"`
}

// Validate validates this dnssec key
func (m *DnssecKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgorithm(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFlags(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var dnssecKeyTypeAlgorithmPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[10,13,14,3,5,6,7,8]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dnssecKeyTypeAlgorithmPropEnum = append(dnssecKeyTypeAlgorithmPropEnum, v)
	}
}

// prop value enum
func (m *DnssecKey) validateAlgorithmEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, dnssecKeyTypeAlgorithmPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DnssecKey) validateAlgorithm(formats strfmt.Registry) error {

	if swag.IsZero(m.Algorithm) { // not required
		return nil
	}

	// value enum
	if err := m.validateAlgorithmEnum("algorithm", "body", m.Algorithm); err != nil {
		return err
	}

	return nil
}

var dnssecKeyTypeFlagsPropEnum []interface{}

func init() {
	var res []int64
	if err := json.Unmarshal([]byte(`[256,257]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dnssecKeyTypeFlagsPropEnum = append(dnssecKeyTypeFlagsPropEnum, v)
	}
}

// prop value enum
func (m *DnssecKey) validateFlagsEnum(path, location string, value int64) error {
	if err := validate.Enum(path, location, value, dnssecKeyTypeFlagsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DnssecKey) validateFlags(formats strfmt.Registry) error {

	if swag.IsZero(m.Flags) { // not required
		return nil
	}

	// value enum
	if err := m.validateFlagsEnum("flags", "body", m.Flags); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DnssecKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DnssecKey) UnmarshalBinary(b []byte) error {
	var res DnssecKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
