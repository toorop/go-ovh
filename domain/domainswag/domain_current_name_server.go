// Code generated by go-swagger; DO NOT EDIT.

package domainswag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainCurrentNameServer CurrentNameServer
// swagger:model domain.CurrentNameServer
type DomainCurrentNameServer struct {

	// Host of the name server
	// Required: true
	// Read Only: true
	Host string `json:"host"`

	// Id of the name server
	// Required: true
	// Read Only: true
	ID int64 `json:"id"`

	// Ip of the name server
	// Read Only: true
	IP string `json:"ip,omitempty"`

	// isUsed flag of the name server
	// Required: true
	// Read Only: true
	IsUsed bool `json:"isUsed"`

	// toDelete flag of the name server
	// Required: true
	// Read Only: true
	ToDelete bool `json:"toDelete"`
}

// Validate validates this domain current name server
func (m *DomainCurrentNameServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHost(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIsUsed(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateToDelete(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainCurrentNameServer) validateHost(formats strfmt.Registry) error {

	if err := validate.RequiredString("host", "body", string(m.Host)); err != nil {
		return err
	}

	return nil
}

func (m *DomainCurrentNameServer) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", int64(m.ID)); err != nil {
		return err
	}

	return nil
}

func (m *DomainCurrentNameServer) validateIsUsed(formats strfmt.Registry) error {

	if err := validate.Required("isUsed", "body", bool(m.IsUsed)); err != nil {
		return err
	}

	return nil
}

func (m *DomainCurrentNameServer) validateToDelete(formats strfmt.Registry) error {

	if err := validate.Required("toDelete", "body", bool(m.ToDelete)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainCurrentNameServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainCurrentNameServer) UnmarshalBinary(b []byte) error {
	var res DomainCurrentNameServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
