// Code generated by go-swagger; DO NOT EDIT.

package domainswag

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainDataClaimNoticeClassification Definition of a trademark claim notice classification
// swagger:model domain.Data.ClaimNotice.Classification
type DomainDataClaimNoticeClassification struct {

	// Summary of the classification
	// Required: true
	// Read Only: true
	Description string `json:"description"`

	// Code of the classification
	// Required: true
	// Read Only: true
	Number string `json:"number"`
}

// Validate validates this domain data claim notice classification
func (m *DomainDataClaimNoticeClassification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNumber(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DomainDataClaimNoticeClassification) validateDescription(formats strfmt.Registry) error {

	if err := validate.RequiredString("description", "body", string(m.Description)); err != nil {
		return err
	}

	return nil
}

func (m *DomainDataClaimNoticeClassification) validateNumber(formats strfmt.Registry) error {

	if err := validate.RequiredString("number", "body", string(m.Number)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DomainDataClaimNoticeClassification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainDataClaimNoticeClassification) UnmarshalBinary(b []byte) error {
	var res DomainDataClaimNoticeClassification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
