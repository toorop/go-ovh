// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthCredential Credential request to get access to the API
// swagger:model auth.Credential
type AuthCredential struct {

	// consumer key
	ConsumerKey string `json:"consumerKey,omitempty"`

	// state
	State string `json:"state,omitempty"`

	// validation Url
	ValidationURL string `json:"validationUrl,omitempty"`
}

// Validate validates this auth credential
func (m *AuthCredential) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var authCredentialTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["expired","pendingValidation","refused","validated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		authCredentialTypeStatePropEnum = append(authCredentialTypeStatePropEnum, v)
	}
}

const (

	// AuthCredentialStateExpired captures enum value "expired"
	AuthCredentialStateExpired string = "expired"

	// AuthCredentialStatePendingValidation captures enum value "pendingValidation"
	AuthCredentialStatePendingValidation string = "pendingValidation"

	// AuthCredentialStateRefused captures enum value "refused"
	AuthCredentialStateRefused string = "refused"

	// AuthCredentialStateValidated captures enum value "validated"
	AuthCredentialStateValidated string = "validated"
)

// prop value enum
func (m *AuthCredential) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, authCredentialTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AuthCredential) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthCredential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthCredential) UnmarshalBinary(b []byte) error {
	var res AuthCredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
